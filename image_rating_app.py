import os
import shutil
import base64
import io
import tkinter as tk
from tkinterdnd2 import DND_FILES, TkinterDnD
from tkinter import filedialog, ttk
from tkinter import messagebox
from PIL import Image, ImageTk

import threading

qr_code_base64 = """

"""

class ImageClassifierApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Image Rating App")
        self.root.geometry("1200x700")

        self.image_list = []
        self.image_index = 0
        self.image_ratings = {}
        self.filtered_star = None
        self.thumb_size = 80
        self.thumb_images = {}
        self.rated_thumbs = []
        self.rating_buttons = []
        self.image_cache = {}

        self.tk_img = None
        self.current_img_path = None

        self.page_size = 200
        self.current_page = 0

        self.status_var = tk.StringVar()
        self.thumb_resize_job = None  # <-- Added here
        self.active_scroll_area = None

        self.supported_extensions = (".jpg", ".jpeg", ".png", ".bmp", ".gif", ".tiff", ".webp")

        self.setup_ui()
        self.bind_keys()

    def enable_scroll(self, area):
        self.active_scroll_area = area
        self.root.bind_all("<MouseWheel>", self.mousewheel_scroll)

    def disable_scroll(self, area):
        if self.active_scroll_area == area:
            self.root.unbind_all("<MouseWheel>")
            self.active_scroll_area = None
        
    def set_widgets_state(self, state):
        for child in self.root.winfo_children():
            try:
                child.configure(state=state)
            except:
                pass

    def setup_ui(self):
        self.main_frame = tk.PanedWindow(self.root, orient=tk.HORIZONTAL)
        self.main_frame.pack(fill=tk.BOTH, expand=True)

        self.left_frame = tk.Frame(self.main_frame, width=250)
        self.main_frame.add(self.left_frame, minsize=250, stretch='never')

        self.center_frame = tk.Frame(self.main_frame)
        self.main_frame.add(self.center_frame, stretch='always')

        self.right_frame = tk.Frame(self.main_frame, width=250)
        self.main_frame.add(self.right_frame, minsize=250, stretch='never')

        self.menu = tk.Menu(self.root)
        self.root.config(menu=self.menu)
        file_menu = tk.Menu(self.menu, tearoff=0)
        self.menu.add_cascade(label="File", menu=file_menu)
        file_menu.add_command(label="Import Folder", command=self.import_folder)
        
        # Menu "Option" > "About"
        option_menu = tk.Menu(self.menu, tearoff=0)
        self.menu.add_cascade(label="Option", menu=option_menu)
        option_menu.add_command(label="About", command=self.show_about_popup)

        self.thumb_slider = tk.Scale(self.left_frame, from_=40, to=160, label="Thumbnail Size", orient=tk.HORIZONTAL, command=self.update_thumbnail_size)
        self.thumb_slider.set(self.thumb_size)
        self.thumb_slider.pack(fill=tk.X, padx=5, pady=(5, 0))

        self.thumb_canvas = tk.Canvas(self.left_frame)
        self.thumb_scrollbar = tk.Scrollbar(self.left_frame, orient=tk.VERTICAL, command=self.thumb_canvas.yview)
        self.thumb_frame = tk.Frame(self.thumb_canvas)

        self.thumb_inner_id = self.thumb_canvas.create_window((0, 0), window=self.thumb_frame, anchor="nw")
        self.thumb_canvas.configure(yscrollcommand=self.thumb_scrollbar.set)

        self.thumb_canvas.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        self.thumb_canvas.bind("<Enter>", lambda e: self.enable_scroll("thumb"))
        self.thumb_canvas.bind("<Leave>", lambda e: self.disable_scroll("thumb"))
        self.root.drop_target_register(DND_FILES)
        self.root.dnd_bind('<<Drop>>', self.on_drop)
        self.thumb_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

        self.thumb_frame.bind("<Configure>", self.on_thumb_configure)

        self.canvas = tk.Canvas(self.center_frame, bg="black")
        self.canvas.pack(fill=tk.BOTH, expand=True)
        self.canvas.bind("<Configure>", lambda e: self.display_image())

        self.counter_label = tk.Label(self.center_frame, text="0 / 0", fg="white", bg="black", anchor="se")
        self.counter_label.place(relx=1.0, rely=1.0, anchor="se", x=-10, y=-10)

        filter_frame = tk.Frame(self.right_frame)
        filter_frame.pack(fill=tk.X, pady=2)
        tk.Label(filter_frame, text="Filter by rating:").pack(side=tk.LEFT, padx=10)
        self.filter_var = tk.StringVar(value="All")
        options = ["All", 1, 2, 3, 4, 5]
        self.filter_menu = tk.OptionMenu(filter_frame, self.filter_var, *options, command=self.apply_filter)
        self.filter_menu.config(width=8)
        self.filter_menu.pack(side=tk.LEFT, padx=5)
        
        self.filter_count_var = tk.StringVar(value="0 images")
        self.filter_count_label = tk.Label(self.right_frame, textvariable=self.filter_count_var, anchor="w")
        self.filter_count_label.pack(fill=tk.X, padx=10, pady=(0, 5))

        self.rated_canvas = tk.Canvas(self.right_frame)
        self.rated_scroll = tk.Scrollbar(self.right_frame, orient=tk.VERTICAL, command=self.rated_canvas.yview)
        self.rated_frame = tk.Frame(self.rated_canvas)

        self.rated_canvas.create_window((0, 0), window=self.rated_frame, anchor="nw")
        self.rated_canvas.configure(yscrollcommand=self.rated_scroll.set)

        self.rated_canvas.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        self.rated_canvas.bind("<Enter>", lambda e: self.enable_scroll("rated"))
        self.rated_canvas.bind("<Leave>", lambda e: self.disable_scroll("rated"))
        self.rated_scroll.pack(side=tk.RIGHT, fill=tk.Y)

        self.rated_frame.bind("<Configure>", lambda e: self.rated_canvas.configure(scrollregion=self.rated_canvas.bbox("all")))

        self.bottom_frame = tk.Frame(self.root)
        self.bottom_frame.pack(fill=tk.X)

        for i in range(1, 6):
            btn = tk.Button(self.bottom_frame, text="☆", width=4, command=lambda i=i: self.rate_image(i))
            btn.pack(side=tk.LEFT, padx=2)
            self.rating_buttons.append(btn)

        tk.Button(self.bottom_frame, text="Skip", command=self.skip_image).pack(side=tk.LEFT, padx=10)
        tk.Button(self.bottom_frame, text="Copy Filtered Images", command=self.copy_filtered_images).pack(side=tk.RIGHT, padx=10)
        tk.Button(self.bottom_frame, text="Clear", command=self.confirm_clear_ratings).pack(side=tk.RIGHT, padx=10)
        
    def confirm_clear_ratings(self):
        result = messagebox.askyesno("Clear Ratings", "Are you sure you want to clear all ratings?")
        if result:
            self.image_ratings.clear()
            self.update_rating_buttons(self.current_img_path)
            self.update_rated_list()
            self.highlight_selected_thumbnail()

    def on_drop(self, event):
        paths = self.root.tk.splitlist(event.data)

        # Filter supported image files or directories
        dropped_files = []
        for path in paths:
            if os.path.isdir(path):
                for f in os.listdir(path):
                    full_path = os.path.join(path, f)
                    if f.lower().endswith(self.supported_extensions):
                        dropped_files.append(full_path)
            elif path.lower().endswith(self.supported_extensions):
                dropped_files.append(path)

        if not dropped_files:
            return

        answer = self.ask_add_or_replace()

        if answer in ("add", "replace"):
            progress_popup = tk.Toplevel(self.root)
            progress_popup.title("Loading Images")
            progress_popup.geometry("400x100")
            progress_popup.transient(self.root)
            progress_popup.grab_set()

            progress_popup.update_idletasks()
            popup_w, popup_h = 400, 100
            root_w = self.root.winfo_width()
            root_h = self.root.winfo_height()
            root_x = self.root.winfo_x()
            root_y = self.root.winfo_y()
            center_x = root_x + (root_w // 2) - (popup_w // 2)
            center_y = root_y + (root_h // 2) - (popup_h // 2)
            progress_popup.geometry(f"{popup_w}x{popup_h}+{center_x}+{center_y}")

            label = tk.Label(progress_popup, text="Loading images...")
            label.pack(pady=5)

            progress = ttk.Progressbar(progress_popup, orient="horizontal", length=300, mode="determinate")
            progress.pack(pady=5)

            self.root.update()

            def load_images():
                self.set_widgets_state("disabled")
                new_files = dropped_files if answer == "replace" else self.image_list + dropped_files
                new_files = sorted(set(new_files))
                total = len(new_files)
                progress.config(maximum=total)

                for idx, path in enumerate(new_files):
                    self.get_cached_image(path, self.thumb_size)
                    progress['value'] = idx + 1
                    label.config(text=f"Loading {idx + 1}/{total} images...")
                    self.root.update_idletasks()

                self.image_list = new_files
                self.image_index = 0
                if answer == "replace":
                    self.image_ratings.clear()
                    self.current_page = 0
                    self.update_rated_list()
                self.display_image()
                self.update_thumbnails()
                progress_popup.destroy()
                self.set_widgets_state("normal")

            threading.Thread(target=load_images, daemon=True).start()

        # if "cancel", do nothing
    
    def ask_add_or_replace(self):
        popup = tk.Toplevel(self.root)
        popup.title("Add or Replace Thumbnails?")
        popup.geometry("350x100")
        popup.transient(self.root)
        popup.grab_set()
        # Centerlize
        popup.update_idletasks()
        popup_w, popup_h = 350, 100
        root_w = self.root.winfo_width()
        root_h = self.root.winfo_height()
        root_x = self.root.winfo_x()
        root_y = self.root.winfo_y()
        center_x = root_x + (root_w // 2) - (popup_w // 2)
        center_y = root_y + (root_h // 2) - (popup_h // 2)
        popup.geometry(f"{popup_w}x{popup_h}+{center_x}+{center_y}")

        result = tk.StringVar(value="cancel")

        tk.Label(popup, text="Do you want to add new images or replace the current list?").pack(pady=10)

        btn_frame = tk.Frame(popup)
        btn_frame.pack()

        tk.Button(btn_frame, text="Add", width=10, command=lambda: [result.set("add"), popup.destroy()]).pack(side=tk.LEFT, padx=5)
        tk.Button(btn_frame, text="Replace", width=10, command=lambda: [result.set("replace"), popup.destroy()]).pack(side=tk.LEFT, padx=5)
        tk.Button(btn_frame, text="Cancel", width=10, command=lambda: popup.destroy()).pack(side=tk.LEFT, padx=5)

        self.root.wait_window(popup)
        return result.get()

    def on_thumb_configure(self, event):
        self.thumb_canvas.configure(scrollregion=self.thumb_canvas.bbox("all"))

    def bind_keys(self):
        self.root.bind("<Down>", lambda e: self.move_selection(1))
        self.root.bind("<Right>", lambda e: self.move_selection(1))
        self.root.bind("<Up>", lambda e: self.move_selection(-1))
        self.root.bind("<Left>", lambda e: self.move_selection(-1))
        for i in range(1, 6):
            self.root.bind(str(i), lambda e, i=i: self.rate_image(i))
        self.root.bind("<space>", lambda e: self.skip_image())

    def mousewheel_scroll(self, event):
        if self.active_scroll_area == "thumb":
            self.thumb_canvas.yview_scroll(-1 * int(event.delta / 120), "units")
        elif self.active_scroll_area == "rated":
            self.rated_canvas.yview_scroll(-1 * int(event.delta / 120), "units")

    def import_folder(self):
        folder = filedialog.askdirectory()
        if not folder:
            return

        progress_popup = tk.Toplevel(self.root)
        progress_popup.title("Loading Images")
        progress_popup.geometry("400x100")
        progress_popup.transient(self.root)
        progress_popup.grab_set()
        # Center the popup
        progress_popup.update_idletasks()
        x = self.root.winfo_x() + (self.root.winfo_width() // 2) - (400 // 2)
        y = self.root.winfo_y() + (self.root.winfo_height() // 2) - (100 // 2)
        progress_popup.geometry(f"+{x}+{y}")

        label = tk.Label(progress_popup, text="Loading images...")
        label.pack(pady=5)

        progress = ttk.Progressbar(progress_popup, orient="horizontal", length=300, mode="determinate")
        progress.pack(pady=5)

        self.root.update()

        def load_images():
            self.set_widgets_state("disabled")
            file_list = [os.path.join(folder, f) for f in os.listdir(folder) if f.lower().endswith(self.supported_extensions)]
            file_list.sort()

            self.image_list = file_list
            total = len(file_list)
            progress.config(maximum=total)

            for idx, path in enumerate(file_list):
                self.get_cached_image(path, self.thumb_size)
                progress['value'] = idx + 1
                label.config(text=f"Loading {idx + 1}/{total} images...")
                self.root.update_idletasks()

            self.image_index = 0
            self.current_page = 0
            self.display_image()
            self.update_thumbnails()
            progress_popup.destroy()
            self.set_widgets_state("normal")

        threading.Thread(target=load_images, daemon=True).start()

    def update_thumbnails(self):
        for widget in self.thumb_frame.winfo_children():
            widget.destroy()

        start = self.current_page * self.page_size
        end = min(len(self.image_list), start + self.page_size)
        for i in range(start, end):
            path = self.image_list[i]
            img = self.get_cached_image(path, self.thumb_size)
            if not img:
                continue
                
            frame = tk.Frame(self.thumb_frame)
            index_label = tk.Label(frame, text=f"{i + 1}", width=4, anchor="e")
            index_label.pack(side=tk.LEFT, padx=(2, 5))

            rating = self.image_ratings.get(path, 0)
            star_str = f"★ {rating}" if rating else "☆"
            thumb_text = f"{star_str}\n{os.path.basename(path)}"

            panel = tk.Label(
                frame,
                image=img,
                text=thumb_text,
                justify="left",
                compound="left",
                anchor="w",
                bd=0,
                relief="flat"
            )
            panel.pack(side=tk.LEFT, fill=tk.X, expand=True)
            panel.bind("<Button-1>", lambda e, idx=i: self.select_image(idx))

            if i == self.image_index:
                panel.config(bg="#a6d4fa")
            else:
                panel.config(bg="SystemButtonFace")

            frame.pack(fill=tk.X, pady=1)

        self.root.after(50, self.ensure_visible)

    def ensure_visible(self):
        children = self.thumb_frame.winfo_children()
        local_index = self.image_index - self.current_page * self.page_size
        if 0 <= local_index < len(children):
            panel = children[local_index]
            canvas_height = self.thumb_canvas.winfo_height()
            panel_top = panel.winfo_y()
            panel_bottom = panel_top + panel.winfo_height()
            view_top = self.thumb_canvas.canvasy(0)
            view_bottom = view_top + canvas_height

            if panel_top < view_top:
                self.thumb_canvas.yview_moveto(panel_top / max(1, self.thumb_frame.winfo_height()))
            elif panel_bottom > view_bottom:
                offset = panel_bottom - canvas_height
                self.thumb_canvas.yview_moveto(offset / max(1, self.thumb_frame.winfo_height()))

    def select_image(self, idx):
        self.image_index = idx
        self.current_page = self.image_index // self.page_size
        self.display_image()
        self.highlight_selected_thumbnail()

    def move_selection(self, direction):
        new_index = self.image_index + direction
        if 0 <= new_index < len(self.image_list):
            self.image_index = new_index
            new_page = self.image_index // self.page_size
            if new_page != self.current_page:
                self.current_page = new_page
            self.display_image()
            self.highlight_selected_thumbnail()
            
    def highlight_selected_thumbnail(self):
        children = self.thumb_frame.winfo_children()
        local_index = self.image_index - self.current_page * self.page_size

        for i, child in enumerate(children):
            panel = child.winfo_children()[1] if len(child.winfo_children()) > 1 else child
            bg_color = "#a6d4fa" if i == local_index else "SystemButtonFace"
            panel.config(bg=bg_color)
            
        self.ensure_visible()

    def update_thumbnail_size(self, val):
        if self.thumb_resize_job:
            self.root.after_cancel(self.thumb_resize_job)

        def apply_resize():
            self.thumb_size = int(val)
            self.update_thumbnails()
            self.update_rated_list()

        self.thumb_resize_job = self.root.after(100, apply_resize)

    def get_cached_image(self, path, size):
        key = (path, size)
        if key not in self.image_cache:
            try:
                img = Image.open(path)
                img.thumbnail((size, size))
                self.image_cache[key] = ImageTk.PhotoImage(img)
            except:
                return None
        return self.image_cache[key]

    def display_image(self):
        if not self.image_list or self.image_index >= len(self.image_list):
            return
        img_path = self.image_list[self.image_index]
        self.current_img_path = img_path
        if (img_path, 'full') not in self.image_cache:
            try:
                image = Image.open(img_path)
                w, h = self.canvas.winfo_width(), self.canvas.winfo_height()
                image.thumbnail((w, h))
                self.image_cache[(img_path, 'full')] = ImageTk.PhotoImage(image)
            except:
                return
        self.tk_img = self.image_cache[(img_path, 'full')]
        self.canvas.delete("all")
        w, h = self.canvas.winfo_width(), self.canvas.winfo_height()
        self.canvas.create_image(w // 2, h // 2, image=self.tk_img)
        self.update_rating_buttons(img_path)
        self.counter_label.config(text=f"{self.image_index + 1} / {len(self.image_list)}")

    def update_rating_buttons(self, img_path):
        rating = self.image_ratings.get(img_path, 0)
        for i, btn in enumerate(self.rating_buttons):
            btn.config(text="★" if i + 1 == rating else "☆")

    def rate_image(self, stars):
        if not self.image_list:
            return
        img_path = self.image_list[self.image_index]
        self.image_ratings[img_path] = stars
        self.update_rating_buttons(img_path)
        self.update_rated_list()
        self.move_selection(1)
        self.highlight_selected_thumbnail()

    def skip_image(self):
        self.move_selection(1)

    def apply_filter(self, event):
        selection = self.filter_var.get()
        self.filtered_star = None if selection == "All" else int(selection)
        self.update_rated_list()
        self.highlight_selected_thumbnail()

    def update_rated_list(self):
        for widget in self.rated_frame.winfo_children():
            widget.destroy()
        self.rated_thumbs.clear()

        for path, star in self.image_ratings.items():
            if self.filtered_star is None or star == self.filtered_star:
                tk_img = self.get_cached_image(path, self.thumb_size)
                if not tk_img:
                    continue
                self.rated_thumbs.append(tk_img)
                frame = tk.Frame(self.rated_frame)

                index = self.image_list.index(path) + 1 if path in self.image_list else "-"
                index_label = tk.Label(frame, text=f"{index}", width=4, anchor="e")
                index_label.pack(side=tk.LEFT, padx=(2, 5))

                star_str = f"★ {star}" if star else "☆"
                thumb_text = f"{star_str}\n{os.path.basename(path)}"

                panel = tk.Label(
                    frame,
                    image=tk_img,
                    text=thumb_text,
                    justify="left",
                    compound="left",
                    anchor="w"
                )
                panel.bind("<Button-1>", lambda e, path=path: self.jump_to_image(path))
                panel.pack(side=tk.LEFT, fill=tk.X, expand=True)
                frame.pack(fill=tk.X, pady=1)
                
        self.filter_count_var.set(f"{len(self.rated_thumbs)} image(s)")
    
    def jump_to_image(self, path):
        if path in self.image_list:
            idx = self.image_list.index(path)
            self.image_index = idx
            self.current_page = self.image_index // self.page_size
            self.display_image()
            self.highlight_selected_thumbnail()
    
    def show_about_popup(self):
        popup = tk.Toplevel(self.root)
        popup.title("About Me")
        popup.geometry("300x400")
        popup.transient(self.root)
        popup.grab_set()
        popup.resizable(False, False)

        # Center the popup
        popup.update_idletasks()
        x = self.root.winfo_x() + (self.root.winfo_width() // 2) - (300 // 2)
        y = self.root.winfo_y() + (self.root.winfo_height() // 2) - (400 // 2)
        popup.geometry(f"+{x}+{y}")

        tk.Label(popup, text="By: Manh Viet", font=("Arial", 12)).pack(pady=(20, 5))
        tk.Label(popup, text="Thanks for using my application", font=("Arial", 10, "italic")).pack(pady=(5, 20))

        tk.Label(popup, text="\nQR code for donate if you like my work:", font=("Arial", 10, "bold")).pack(pady=(0, 5))

        try:
            qr_data = base64.b64decode(qr_code_base64)
            qr_img = Image.open(io.BytesIO(qr_data))
            qr_img = qr_img.resize((150, 150), Image.LANCZOS)
            self.qr_photo = ImageTk.PhotoImage(qr_img)  # Keep reference
            tk.Label(popup, image=self.qr_photo).pack()
        except Exception as e:
            tk.Label(popup, text="(QR image not found)", fg="red").pack()
            
        tk.Button(popup, text="Close", command=popup.destroy).pack(pady=10)

    def copy_filtered_images(self):
        target_dir = filedialog.askdirectory()
        if not target_dir:
            return
        for img_path, rating in self.image_ratings.items():
            if self.filtered_star is None or rating == self.filtered_star:
                shutil.copy(img_path, os.path.join(target_dir, os.path.basename(img_path)))

if __name__ == '__main__':
    root = TkinterDnD.Tk()
    app = ImageClassifierApp(root)
    root.mainloop()